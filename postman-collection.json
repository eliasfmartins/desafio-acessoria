{
	"info": {
		"name": "Acessoria API",
		"description": "API de gerenciamento de tasks e usu√°rios com autentica√ß√£o JWT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "1.0.0"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "auth_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "admin_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "task_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "tag_id",
			"value": "",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "üîê Autentica√ß√£o",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', response.token);",
									"    ",
									"    // Se for admin, tamb√©m salva como admin_token",
									"    if (response.user.role === 'ADMIN') {",
									"        pm.collectionVariables.set('admin_token', response.token);",
									"    }",
									"    ",
									"    pm.test('Login successful', () => {",
									"        pm.expect(response.token).to.exist;",
									"        pm.expect(response.user).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@acessoria.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Fazer login na API. Use os dados do seed:\n- admin@acessoria.com (ADMIN)\n- joao@acessoria.com (USER)\n- maria@acessoria.com (USER)\n- pedro@acessoria.com (USER)\n- ana@acessoria.com (USER)\n\nSenha para todos: password123"
					}
				},
				{
					"name": "Login como Usu√°rio Regular",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('auth_token', response.token);",
									"    ",
									"    pm.test('Login successful', () => {",
									"        pm.expect(response.token).to.exist;",
									"        pm.expect(response.user.role).to.eql('USER');",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"joao@acessoria.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "Login como usu√°rio regular para testar permiss√µes"
					}
				},
				{
					"name": "Registrar Usu√°rio",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"novo@acessoria.com\",\n  \"password\": \"password123\",\n  \"name\": \"Novo Usu√°rio\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "Criar novo usu√°rio"
					}
				},
				{
					"name": "Perfil do Usu√°rio",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"profile"
							]
						},
						"description": "Obter informa√ß√µes do usu√°rio logado"
					}
				}
			],
			"description": "Endpoints de autentica√ß√£o e autoriza√ß√£o"
		},
		{
			"name": "üìã Tasks",
			"item": [
				{
					"name": "Criar Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('task_id', response.id);",
									"    ",
									"    pm.test('Task created successfully', () => {",
									"        pm.expect(response.id).to.exist;",
									"        pm.expect(response.title).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Nova Task de Teste\",\n  \"description\": \"Descri√ß√£o da nova task\",\n  \"priority\": \"HIGH\",\n  \"status\": \"PENDING\",\n  \"dueDate\": \"2024-12-31T23:59:59.000Z\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							]
						},
						"description": "Criar nova task"
					}
				},
				{
					"name": "Listar Tasks",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "P√°gina (opcional)"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Limite por p√°gina (opcional)"
								},
								{
									"key": "status",
									"value": "PENDING",
									"description": "Filtrar por status (opcional)",
									"disabled": true
								},
								{
									"key": "priority",
									"value": "HIGH",
									"description": "Filtrar por prioridade (opcional)",
									"disabled": true
								},
								{
									"key": "search",
									"value": "teste",
									"description": "Buscar por texto (opcional)",
									"disabled": true
								}
							]
						},
						"description": "Listar todas as tasks do usu√°rio com filtros opcionais"
					}
				},
				{
					"name": "Obter Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Obter task espec√≠fica por ID"
					}
				},
				{
					"name": "Atualizar Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Task Atualizada\",\n  \"status\": \"IN_PROGRESS\",\n  \"priority\": \"MEDIUM\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Atualizar task existente"
					}
				},
				{
					"name": "Deletar Task (Soft Delete)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Deletar task (soft delete) - a task √© marcada como deletada mas pode ser restaurada"
					}
				},
				{
					"name": "Restaurar Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tasks/{{task_id}}/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tasks",
								"{{task_id}}",
								"restore"
							]
						},
						"description": "Restaurar uma task que foi deletada (soft delete)"
					}
				}
			],
			"description": "Gerenciamento de tasks"
		},
		{
			"name": "üè∑Ô∏è Tags",
			"item": [
				{
					"name": "Criar Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('tag_id', response.id);",
									"    ",
									"    pm.test('Tag created successfully', () => {",
									"        pm.expect(response.id).to.exist;",
									"        pm.expect(response.name).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Nova Tag\",\n  \"color\": \"#FF5733\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						},
						"description": "Criar nova tag"
					}
				},
				{
					"name": "Listar Tags",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags"
							]
						},
						"description": "Listar todas as tags"
					}
				},
				{
					"name": "Obter Tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						},
						"description": "Obter tag espec√≠fica por ID"
					}
				},
				{
					"name": "Atualizar Tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Tag Atualizada\",\n  \"color\": \"#33FF57\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						},
						"description": "Atualizar tag existente"
					}
				},
				{
					"name": "Deletar Tag",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"{{tag_id}}"
							]
						},
						"description": "Deletar tag"
					}
				},
				{
					"name": "Adicionar Tag √† Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"tagId\": \"{{tag_id}}\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/tags/tasks/{{task_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"tasks",
								"{{task_id}}"
							]
						},
						"description": "Associar tag a uma task"
					}
				},
				{
					"name": "Remover Tag da Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/tags/tasks/{{task_id}}/{{tag_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"tags",
								"tasks",
								"{{task_id}}",
								"{{tag_id}}"
							]
						},
						"description": "Remover associa√ß√£o entre tag e task"
					}
				}
			],
			"description": "Gerenciamento de tags"
		},
		{
			"name": "üëë Admin",
			"item": [
				{
					"name": "Listar Usu√°rios (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users"
							]
						},
						"description": "Listar todos os usu√°rios (apenas ADMIN)"
					}
				},
				{
					"name": "Listar Tasks (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/tasks",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"tasks"
							]
						},
						"description": "Listar todas as tasks do sistema (apenas ADMIN)"
					}
				},
				{
					"name": "Alterar Role do Usu√°rio",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    pm.collectionVariables.set('user_id', response.id);",
									"    ",
									"    pm.test('User role updated successfully', () => {",
									"        pm.expect(response.role).to.exist;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"role\": \"ADMIN\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/admin/users/{{user_id}}/role",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"{{user_id}}",
								"role"
							]
						},
						"description": "Alterar role de um usu√°rio (apenas ADMIN)"
					}
				},
				{
					"name": "Deletar Usu√°rio (Soft Delete)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Deletar usu√°rio e suas tasks com soft delete (apenas ADMIN) - pode ser restaurado"
					}
				},
				{
					"name": "Listar Usu√°rios Deletados",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users/deleted",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"deleted"
							]
						},
						"description": "Listar usu√°rios deletados com soft delete (apenas ADMIN)"
					}
				},
				{
					"name": "Listar Tasks Deletadas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/tasks/deleted",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"tasks",
								"deleted"
							]
						},
						"description": "Listar tasks deletadas com soft delete (apenas ADMIN)"
					}
				},
				{
					"name": "Restaurar Usu√°rio",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users/{{user_id}}/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"{{user_id}}",
								"restore"
							]
						},
						"description": "Restaurar usu√°rio deletado e suas tasks (apenas ADMIN)"
					}
				},
				{
					"name": "Restaurar Task (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/tasks/{{task_id}}/restore",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"tasks",
								"{{task_id}}",
								"restore"
							]
						},
						"description": "Restaurar task deletada (apenas ADMIN)"
					}
				},
				{
					"name": "üö® Hard Delete Usu√°rio",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/users/{{user_id}}/permanent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"users",
								"{{user_id}}",
								"permanent"
							]
						},
						"description": "‚ö†Ô∏è DELETAR PERMANENTEMENTE usu√°rio - IRREVERS√çVEL! (apenas ADMIN)"
					}
				},
				{
					"name": "üö® Hard Delete Task",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/admin/tasks/{{task_id}}/permanent",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"admin",
								"tasks",
								"{{task_id}}",
								"permanent"
							]
						},
						"description": "‚ö†Ô∏è DELETAR PERMANENTEMENTE task - IRREVERS√çVEL! (apenas ADMIN)"
					}
				}
			],
			"description": "Funcionalidades administrativas (apenas ADMIN)"
		},
		{
			"name": "üìä Estat√≠sticas",
			"item": [
				{
					"name": "Dashboard de Estat√≠sticas",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/stats/dashboard",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"stats",
								"dashboard"
							]
						},
						"description": "Obter estat√≠sticas do usu√°rio"
					}
				}
			],
			"description": "Dashboard e estat√≠sticas"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Auto-set variables based on response",
					"console.log('Pre-request script executed');"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', () => {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has valid JSON', () => {",
					"    pm.response.to.have.jsonBody();",
					"});"
				]
			}
		}
	]
}